<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.richie.backstage.dao.GoodsMapper">

    <resultMap id="goodsResult" type="Goods">
        <id property="goodsId" column="goods_id"/>
        <result property="gname" column="gname"/>
        <result property="createdAt" column="created_at"/>
        <result property="specification" column="specification"/>
        <result property="picture" column="picture"/>
        <result property="price" column="price"/>
        <result property="stock" column="stock"/>
        <result property="saleVolume" column="sale_volume"/>
        <result property="cost" column="cost"/>
        <result property="onSale" column="on_sale"/>

        <association property="category" column="cat_id" javaType="Category">
            <id property="catId" column="cat_id"/>
            <result property="name" column="name"/>
        </association>
    </resultMap>

    <insert id="createGoods" parameterType="Goods">
        insert into goods (gname, specification, price, cost, stock, sale_volume, user_id, cat_id)
        values (#{goods.gname}, #{goods.specification}, #{goods.price}, #{goods.cost}, #{goods.stock}, #{goods.saleVolume},
                #{goods.user.userId}, #{goods.category.catId})
    </insert>

    <update id="updateGoods" parameterType="Goods">
        update goods set gname = #{goods.gname}, specification = #{goods.specification}, price = #{goods.price}, cost = #{goods.cost},
                         stock = #{goods.stock}, sale_volume = #{goods.saleVolume}, on_sale = #{goods.onSale}, cat_id = #{goods.category.catId}
        where goods_id = #{goods.goodsId}
    </update>

    <update id="updateGoodsImage">
        update goods set picture = #{picture}
        where goods_id = #{goods_id}
    </update>

    <delete id="deleteGoods">
        delete from goods where goods_id = #{goods_id}
    </delete>

    <sql id="queryColumns">g.goods_id, g.gname, g.picture, g.price, g.specification, g.cost, g.stock, g.sale_volume, g.on_sale, g.cat_id,
        date_format(g.created_at, '%Y-%m-%d %H:%m') as created_at, c.name
    </sql>

    <select id="queryGoodsById" parameterType="int" resultMap="goodsResult">
        select
        <include refid="queryColumns"/>
        from goods g, category c
        where g.goods_id = #{goods_id}
        and g.cat_id = c.cat_id
        limit 1
    </select>

    <select id="queryGoodsByPage" resultMap="goodsResult">
        select
        <include refid="queryColumns"/>
        from goods g, category c
        where g.gname like '%${name}%' and g.user_id = #{user_id}
        and g.cat_id = c.cat_id
        order by created_at desc
        limit #{page_size} offset #{page_index}
    </select>

    <select id="queryGoodsByPageSale" resultMap="goodsResult">
        select
        <include refid="queryColumns"/>
        from goods g, category c
        where g.on_sale = #{sale} and g.user_id = #{user_id}
        and g.cat_id = c.cat_id
        order by created_at desc
        limit #{page_size} offset #{page_index}
    </select>

    <select id="queryCount" parameterType="int" resultType="int">
        select count(1)
        from goods
        where user_id = #{user_id}
    </select>

    <select id="queryCountBySale" parameterType="int" resultType="int">
        select count(1)
        from goods
        where user_id = #{user_id} and on_sale = #{sale}
    </select>

    <update id="increaseStock">
        update goods set stock = #{stock} + stock
        where goods_id = #{goods_id}
    </update>

    <update id="changeSale">
        update goods set on_sale = #{sale}
        where goods_id = #{goods_id}
    </update>

</mapper>